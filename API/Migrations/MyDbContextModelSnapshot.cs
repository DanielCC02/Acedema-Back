// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("API.Models.Entities.Bitacora", b =>
                {
                    b.Property<int>("BitacoraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaHoraRegistro")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdSemana")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SemanaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BitacoraId");

                    b.HasIndex("SemanaId");

                    b.ToTable("Bitacora");
                });

            modelBuilder.Entity("API.Models.Entities.ClaseDocente", b =>
                {
                    b.Property<int>("ClaseDocenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClasesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CronogramaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocentePersonaId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Miembros")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClaseDocenteId");

                    b.HasIndex("ClasesId");

                    b.HasIndex("CronogramaId");

                    b.HasIndex("DocentePersonaId");

                    b.ToTable("ClaseDocente");
                });

            modelBuilder.Entity("API.Models.Entities.ClaseEstudiante", b =>
                {
                    b.Property<int>("ClaseEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClaseDocenteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstudiantePersonaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatriculaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClaseEstudianteId");

                    b.HasIndex("ClaseDocenteId");

                    b.HasIndex("EstudiantePersonaId");

                    b.HasIndex("MatriculaId");

                    b.ToTable("ClaseEstudiante");
                });

            modelBuilder.Entity("API.Models.Entities.Clases", b =>
                {
                    b.Property<int>("ClasesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Modalidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreClase")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClasesId");

                    b.ToTable("Clases");
                });

            modelBuilder.Entity("API.Models.Entities.Cronograma", b =>
                {
                    b.Property<int>("CronogramaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdClaseDocente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LinkTeams")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CronogramaId");

                    b.ToTable("Cronograma");
                });

            modelBuilder.Entity("API.Models.Entities.Matricula", b =>
                {
                    b.Property<int>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdEstudiante")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("API.Models.Entities.Persona", b =>
                {
                    b.Property<int>("PersonaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CedulaResponsable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdRol")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumCedula")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SegundoNombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Telefono1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Telefono2")
                        .HasColumnType("INTEGER");

                    b.HasKey("PersonaId");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("API.Models.Entities.Semana", b =>
                {
                    b.Property<int>("SemanaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CronogramaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdCronograma")
                        .HasColumnType("INTEGER");

                    b.HasKey("SemanaId");

                    b.HasIndex("CronogramaId");

                    b.ToTable("Semana");
                });

            modelBuilder.Entity("API.Models.Entities.Bitacora", b =>
                {
                    b.HasOne("API.Models.Entities.Semana", null)
                        .WithMany("Bitacoras")
                        .HasForeignKey("SemanaId");
                });

            modelBuilder.Entity("API.Models.Entities.ClaseDocente", b =>
                {
                    b.HasOne("API.Models.Entities.Clases", "clase")
                        .WithMany()
                        .HasForeignKey("ClasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Cronograma", "Cronograma")
                        .WithMany()
                        .HasForeignKey("CronogramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Persona", "Docente")
                        .WithMany()
                        .HasForeignKey("DocentePersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cronograma");

                    b.Navigation("Docente");

                    b.Navigation("clase");
                });

            modelBuilder.Entity("API.Models.Entities.ClaseEstudiante", b =>
                {
                    b.HasOne("API.Models.Entities.ClaseDocente", "claseDocente")
                        .WithMany()
                        .HasForeignKey("ClaseDocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Persona", "Estudiante")
                        .WithMany()
                        .HasForeignKey("EstudiantePersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Entities.Matricula", null)
                        .WithMany("Matriculados")
                        .HasForeignKey("MatriculaId");

                    b.Navigation("Estudiante");

                    b.Navigation("claseDocente");
                });

            modelBuilder.Entity("API.Models.Entities.Semana", b =>
                {
                    b.HasOne("API.Models.Entities.Cronograma", null)
                        .WithMany("Semanas")
                        .HasForeignKey("CronogramaId");
                });

            modelBuilder.Entity("API.Models.Entities.Cronograma", b =>
                {
                    b.Navigation("Semanas");
                });

            modelBuilder.Entity("API.Models.Entities.Matricula", b =>
                {
                    b.Navigation("Matriculados");
                });

            modelBuilder.Entity("API.Models.Entities.Semana", b =>
                {
                    b.Navigation("Bitacoras");
                });
#pragma warning restore 612, 618
        }
    }
}
